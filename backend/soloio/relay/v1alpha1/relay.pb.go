// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: relay/v1alpha1/relay.proto

package v1alpha1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	any1 "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelayDeltaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	// When the RelayDeltaRequest is a ACK or NACK message in response
	// to a previous RelayDeltaResponse, the response_nonce must be the
	// nonce in the RelayDeltaResponse.
	// Otherwise (unlike in RelayRequest) response_nonce must be omitted.
	ResponseNonce string `protobuf:"bytes,6,opt,name=response_nonce,json=responseNonce,proto3" json:"response_nonce,omitempty"`
	// This is populated when the previous :ref:`RelayResponse <envoy_api_msg_service.discovery.v3.RelayResponse>`
	// failed to update configuration. The *message* field in *error_details*
	// provides the Envoy internal exception related to the failure.
	ErrorDetail *ErrorDetail `protobuf:"bytes,7,opt,name=error_detail,json=errorDetail,proto3" json:"error_detail,omitempty"`
	// List of resources to watch. if watching is not supported, nack should be returned.
	WatchResources []*GVK `protobuf:"bytes,4,rep,name=watch_resources,json=watchResources,proto3" json:"watch_resources,omitempty"`
	// list of optional filters to constrain what the agent should watch
	WatchFilters []*WatchFilter `protobuf:"bytes,5,rep,name=watch_filters,json=watchFilters,proto3" json:"watch_filters,omitempty"`
}

func (x *RelayDeltaRequest) Reset() {
	*x = RelayDeltaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_v1alpha1_relay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayDeltaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayDeltaRequest) ProtoMessage() {}

func (x *RelayDeltaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_v1alpha1_relay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayDeltaRequest.ProtoReflect.Descriptor instead.
func (*RelayDeltaRequest) Descriptor() ([]byte, []int) {
	return file_relay_v1alpha1_relay_proto_rawDescGZIP(), []int{0}
}

func (x *RelayDeltaRequest) GetVersionInfo() string {
	if x != nil {
		return x.VersionInfo
	}
	return ""
}

func (x *RelayDeltaRequest) GetResponseNonce() string {
	if x != nil {
		return x.ResponseNonce
	}
	return ""
}

func (x *RelayDeltaRequest) GetErrorDetail() *ErrorDetail {
	if x != nil {
		return x.ErrorDetail
	}
	return nil
}

func (x *RelayDeltaRequest) GetWatchResources() []*GVK {
	if x != nil {
		return x.WatchResources
	}
	return nil
}

func (x *RelayDeltaRequest) GetWatchFilters() []*WatchFilter {
	if x != nil {
		return x.WatchFilters
	}
	return nil
}

// details of an error that occurred processing a RelayDeltaResponse
type ErrorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorDetail) Reset() {
	*x = ErrorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_v1alpha1_relay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetail) ProtoMessage() {}

func (x *ErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_relay_v1alpha1_relay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetail.ProtoReflect.Descriptor instead.
func (*ErrorDetail) Descriptor() ([]byte, []int) {
	return file_relay_v1alpha1_relay_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// TODO: if all component restart, we need a way to signal to the client
// that it received a full snapshot, so it can delete stale resources / know that it is ready
// and generate output resources.
type RelayDeltaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the response data (used for debugging).
	SystemVersionInfo string `protobuf:"bytes,1,opt,name=system_version_info,json=systemVersionInfo,proto3" json:"system_version_info,omitempty"`
	// are there more updates coming as part of this current change?
	// this is especially important on the first sync. The snapshot shouldn't be considered complete
	// unless this was observed to be false.
	More bool `protobuf:"varint,2,opt,name=more,proto3" json:"more,omitempty"`
	// Resource patch. Empty if no changes have happened.
	ResourcePatch *ResourcePatch `protobuf:"bytes,3,opt,name=resource_patch,json=resourcePatch,proto3" json:"resource_patch,omitempty"`
	// a unique string representing this version of the response data.
	Nonce string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *RelayDeltaResponse) Reset() {
	*x = RelayDeltaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_v1alpha1_relay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayDeltaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayDeltaResponse) ProtoMessage() {}

func (x *RelayDeltaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relay_v1alpha1_relay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayDeltaResponse.ProtoReflect.Descriptor instead.
func (*RelayDeltaResponse) Descriptor() ([]byte, []int) {
	return file_relay_v1alpha1_relay_proto_rawDescGZIP(), []int{2}
}

func (x *RelayDeltaResponse) GetSystemVersionInfo() string {
	if x != nil {
		return x.SystemVersionInfo
	}
	return ""
}

func (x *RelayDeltaResponse) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

func (x *RelayDeltaResponse) GetResourcePatch() *ResourcePatch {
	if x != nil {
		return x.ResourcePatch
	}
	return nil
}

func (x *RelayDeltaResponse) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type ResourcePatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response resources. These are typed resources, whose types must match
	// the type_url field.
	Resources []*Resource `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	// Identifiers of resources that have be deleted and to be removed from the xDS Client.
	// Removed resources for missing resources can be ignored.
	RemovedResources []*ResourceIdentifier `protobuf:"bytes,6,rep,name=removed_resources,json=removedResources,proto3" json:"removed_resources,omitempty"`
	// the GVKs whose types require status updates rather than upserts.
	// set when the server wants to update the status of objects on the client side.
	// only applicable in the pull client/server.
	StatusUpdateGvks []*GVK `protobuf:"bytes,3,rep,name=status_update_gvks,json=statusUpdateGvks,proto3" json:"status_update_gvks,omitempty"`
}

func (x *ResourcePatch) Reset() {
	*x = ResourcePatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_v1alpha1_relay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePatch) ProtoMessage() {}

func (x *ResourcePatch) ProtoReflect() protoreflect.Message {
	mi := &file_relay_v1alpha1_relay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePatch.ProtoReflect.Descriptor instead.
func (*ResourcePatch) Descriptor() ([]byte, []int) {
	return file_relay_v1alpha1_relay_proto_rawDescGZIP(), []int{3}
}

func (x *ResourcePatch) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ResourcePatch) GetRemovedResources() []*ResourceIdentifier {
	if x != nil {
		return x.RemovedResources
	}
	return nil
}

func (x *ResourcePatch) GetStatusUpdateGvks() []*GVK {
	if x != nil {
		return x.StatusUpdateGvks
	}
	return nil
}

type ClusterResourcePatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of clusterName -> patch
	Patches map[string]*ResourcePatch `protobuf:"bytes,1,rep,name=patches,proto3" json:"patches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterResourcePatch) Reset() {
	*x = ClusterResourcePatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_v1alpha1_relay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResourcePatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResourcePatch) ProtoMessage() {}

func (x *ClusterResourcePatch) ProtoReflect() protoreflect.Message {
	mi := &file_relay_v1alpha1_relay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResourcePatch.ProtoReflect.Descriptor instead.
func (*ClusterResourcePatch) Descriptor() ([]byte, []int) {
	return file_relay_v1alpha1_relay_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterResourcePatch) GetPatches() map[string]*ResourcePatch {
	if x != nil {
		return x.Patches
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource's id, to distinguish it from other resources.
	// contains resource type information.
	Id *ResourceIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The resource being tracked.
	Resource *any1.Any `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_v1alpha1_relay_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_relay_v1alpha1_relay_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_relay_v1alpha1_relay_proto_rawDescGZIP(), []int{5}
}

func (x *Resource) GetId() *ResourceIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Resource) GetResource() *any1.Any {
	if x != nil {
		return x.Resource
	}
	return nil
}

type ResourceIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Gvk       *GVK   `protobuf:"bytes,3,opt,name=gvk,proto3" json:"gvk,omitempty"`
}

func (x *ResourceIdentifier) Reset() {
	*x = ResourceIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_v1alpha1_relay_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceIdentifier) ProtoMessage() {}

func (x *ResourceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_relay_v1alpha1_relay_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceIdentifier.ProtoReflect.Descriptor instead.
func (*ResourceIdentifier) Descriptor() ([]byte, []int) {
	return file_relay_v1alpha1_relay_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceIdentifier) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResourceIdentifier) GetGvk() *GVK {
	if x != nil {
		return x.Gvk
	}
	return nil
}

type GVK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group   string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Kind    string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *GVK) Reset() {
	*x = GVK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_v1alpha1_relay_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GVK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GVK) ProtoMessage() {}

func (x *GVK) ProtoReflect() protoreflect.Message {
	mi := &file_relay_v1alpha1_relay_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GVK.ProtoReflect.Descriptor instead.
func (*GVK) Descriptor() ([]byte, []int) {
	return file_relay_v1alpha1_relay_proto_rawDescGZIP(), []int{7}
}

func (x *GVK) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GVK) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GVK) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type WatchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// apply this filter to resources of this GVK
	// empty means all gvks
	ApplyToGvks []*GVK `protobuf:"bytes,1,rep,name=apply_to_gvks,json=applyToGvks,proto3" json:"apply_to_gvks,omitempty"`
	// filter only resources with these labels
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// filter only resources in these namespaces
	Namespaces []string `protobuf:"bytes,3,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// filter only resources with these names
	Names []string `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty"`
	// negate this filter (exclude matching resources)
	Negate bool `protobuf:"varint,5,opt,name=negate,proto3" json:"negate,omitempty"`
}

func (x *WatchFilter) Reset() {
	*x = WatchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_v1alpha1_relay_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchFilter) ProtoMessage() {}

func (x *WatchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_relay_v1alpha1_relay_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchFilter.ProtoReflect.Descriptor instead.
func (*WatchFilter) Descriptor() ([]byte, []int) {
	return file_relay_v1alpha1_relay_proto_rawDescGZIP(), []int{8}
}

func (x *WatchFilter) GetApplyToGvks() []*GVK {
	if x != nil {
		return x.ApplyToGvks
	}
	return nil
}

func (x *WatchFilter) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WatchFilter) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *WatchFilter) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *WatchFilter) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

var File_relay_v1alpha1_relay_proto protoreflect.FileDescriptor

var file_relay_v1alpha1_relay_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4d, 0x0a, 0x0f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x56, 0x4b, 0x52, 0x0e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x27, 0x0a, 0x0b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x12,
	0x55, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76,
	0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x8e, 0x02, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x47,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x76, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x56, 0x4b, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x76, 0x6b, 0x73, 0x22, 0xe0, 0x01,
	0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x5c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76,
	0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x1a, 0x6a, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x81, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73,
	0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x7e, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x03,
	0x67, 0x76, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73,
	0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x56, 0x4b, 0x52,
	0x03, 0x67, 0x76, 0x6b, 0x22, 0x49, 0x0a, 0x03, 0x47, 0x56, 0x4b, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0xb2, 0x02, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x76, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76, 0x32,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x56, 0x4b, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x47, 0x76, 0x6b, 0x73, 0x12, 0x50, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73,
	0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x32, 0x97, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x75,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12,
	0x32, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x97,
	0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x33, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x73,
	0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x32,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x10, 0x5a, 0x0e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_relay_v1alpha1_relay_proto_rawDescOnce sync.Once
	file_relay_v1alpha1_relay_proto_rawDescData = file_relay_v1alpha1_relay_proto_rawDesc
)

func file_relay_v1alpha1_relay_proto_rawDescGZIP() []byte {
	file_relay_v1alpha1_relay_proto_rawDescOnce.Do(func() {
		file_relay_v1alpha1_relay_proto_rawDescData = protoimpl.X.CompressGZIP(file_relay_v1alpha1_relay_proto_rawDescData)
	})
	return file_relay_v1alpha1_relay_proto_rawDescData
}

var file_relay_v1alpha1_relay_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_relay_v1alpha1_relay_proto_goTypes = []interface{}{
	(*RelayDeltaRequest)(nil),    // 0: relay.multicluster.skv2.solo.io.RelayDeltaRequest
	(*ErrorDetail)(nil),          // 1: relay.multicluster.skv2.solo.io.ErrorDetail
	(*RelayDeltaResponse)(nil),   // 2: relay.multicluster.skv2.solo.io.RelayDeltaResponse
	(*ResourcePatch)(nil),        // 3: relay.multicluster.skv2.solo.io.ResourcePatch
	(*ClusterResourcePatch)(nil), // 4: relay.multicluster.skv2.solo.io.ClusterResourcePatch
	(*Resource)(nil),             // 5: relay.multicluster.skv2.solo.io.Resource
	(*ResourceIdentifier)(nil),   // 6: relay.multicluster.skv2.solo.io.ResourceIdentifier
	(*GVK)(nil),                  // 7: relay.multicluster.skv2.solo.io.GVK
	(*WatchFilter)(nil),          // 8: relay.multicluster.skv2.solo.io.WatchFilter
	nil,                          // 9: relay.multicluster.skv2.solo.io.ClusterResourcePatch.PatchesEntry
	nil,                          // 10: relay.multicluster.skv2.solo.io.WatchFilter.LabelsEntry
	(*any1.Any)(nil),             // 11: google.protobuf.Any
}
var file_relay_v1alpha1_relay_proto_depIdxs = []int32{
	1,  // 0: relay.multicluster.skv2.solo.io.RelayDeltaRequest.error_detail:type_name -> relay.multicluster.skv2.solo.io.ErrorDetail
	7,  // 1: relay.multicluster.skv2.solo.io.RelayDeltaRequest.watch_resources:type_name -> relay.multicluster.skv2.solo.io.GVK
	8,  // 2: relay.multicluster.skv2.solo.io.RelayDeltaRequest.watch_filters:type_name -> relay.multicluster.skv2.solo.io.WatchFilter
	3,  // 3: relay.multicluster.skv2.solo.io.RelayDeltaResponse.resource_patch:type_name -> relay.multicluster.skv2.solo.io.ResourcePatch
	5,  // 4: relay.multicluster.skv2.solo.io.ResourcePatch.resources:type_name -> relay.multicluster.skv2.solo.io.Resource
	6,  // 5: relay.multicluster.skv2.solo.io.ResourcePatch.removed_resources:type_name -> relay.multicluster.skv2.solo.io.ResourceIdentifier
	7,  // 6: relay.multicluster.skv2.solo.io.ResourcePatch.status_update_gvks:type_name -> relay.multicluster.skv2.solo.io.GVK
	9,  // 7: relay.multicluster.skv2.solo.io.ClusterResourcePatch.patches:type_name -> relay.multicluster.skv2.solo.io.ClusterResourcePatch.PatchesEntry
	6,  // 8: relay.multicluster.skv2.solo.io.Resource.id:type_name -> relay.multicluster.skv2.solo.io.ResourceIdentifier
	11, // 9: relay.multicluster.skv2.solo.io.Resource.resource:type_name -> google.protobuf.Any
	7,  // 10: relay.multicluster.skv2.solo.io.ResourceIdentifier.gvk:type_name -> relay.multicluster.skv2.solo.io.GVK
	7,  // 11: relay.multicluster.skv2.solo.io.WatchFilter.apply_to_gvks:type_name -> relay.multicluster.skv2.solo.io.GVK
	10, // 12: relay.multicluster.skv2.solo.io.WatchFilter.labels:type_name -> relay.multicluster.skv2.solo.io.WatchFilter.LabelsEntry
	3,  // 13: relay.multicluster.skv2.solo.io.ClusterResourcePatch.PatchesEntry.value:type_name -> relay.multicluster.skv2.solo.io.ResourcePatch
	0,  // 14: relay.multicluster.skv2.solo.io.RelayPullServer.PullResourceDeltas:input_type -> relay.multicluster.skv2.solo.io.RelayDeltaRequest
	2,  // 15: relay.multicluster.skv2.solo.io.RelayPushServer.PushResourceDeltas:input_type -> relay.multicluster.skv2.solo.io.RelayDeltaResponse
	2,  // 16: relay.multicluster.skv2.solo.io.RelayPullServer.PullResourceDeltas:output_type -> relay.multicluster.skv2.solo.io.RelayDeltaResponse
	0,  // 17: relay.multicluster.skv2.solo.io.RelayPushServer.PushResourceDeltas:output_type -> relay.multicluster.skv2.solo.io.RelayDeltaRequest
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_relay_v1alpha1_relay_proto_init() }
func file_relay_v1alpha1_relay_proto_init() {
	if File_relay_v1alpha1_relay_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_relay_v1alpha1_relay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayDeltaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_v1alpha1_relay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_v1alpha1_relay_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayDeltaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_v1alpha1_relay_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_v1alpha1_relay_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResourcePatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_v1alpha1_relay_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_v1alpha1_relay_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_v1alpha1_relay_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GVK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_v1alpha1_relay_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relay_v1alpha1_relay_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_relay_v1alpha1_relay_proto_goTypes,
		DependencyIndexes: file_relay_v1alpha1_relay_proto_depIdxs,
		MessageInfos:      file_relay_v1alpha1_relay_proto_msgTypes,
	}.Build()
	File_relay_v1alpha1_relay_proto = out.File
	file_relay_v1alpha1_relay_proto_rawDesc = nil
	file_relay_v1alpha1_relay_proto_goTypes = nil
	file_relay_v1alpha1_relay_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RelayPullServerClient is the client API for RelayPullServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelayPullServerClient interface {
	PullResourceDeltas(ctx context.Context, opts ...grpc.CallOption) (RelayPullServer_PullResourceDeltasClient, error)
}

type relayPullServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayPullServerClient(cc grpc.ClientConnInterface) RelayPullServerClient {
	return &relayPullServerClient{cc}
}

func (c *relayPullServerClient) PullResourceDeltas(ctx context.Context, opts ...grpc.CallOption) (RelayPullServer_PullResourceDeltasClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RelayPullServer_serviceDesc.Streams[0], "/relay.multicluster.skv2.solo.io.RelayPullServer/PullResourceDeltas", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayPullServerPullResourceDeltasClient{stream}
	return x, nil
}

type RelayPullServer_PullResourceDeltasClient interface {
	Send(*RelayDeltaRequest) error
	Recv() (*RelayDeltaResponse, error)
	grpc.ClientStream
}

type relayPullServerPullResourceDeltasClient struct {
	grpc.ClientStream
}

func (x *relayPullServerPullResourceDeltasClient) Send(m *RelayDeltaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relayPullServerPullResourceDeltasClient) Recv() (*RelayDeltaResponse, error) {
	m := new(RelayDeltaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelayPullServerServer is the server API for RelayPullServer service.
type RelayPullServerServer interface {
	PullResourceDeltas(RelayPullServer_PullResourceDeltasServer) error
}

// UnimplementedRelayPullServerServer can be embedded to have forward compatible implementations.
type UnimplementedRelayPullServerServer struct {
}

func (*UnimplementedRelayPullServerServer) PullResourceDeltas(RelayPullServer_PullResourceDeltasServer) error {
	return status.Errorf(codes.Unimplemented, "method PullResourceDeltas not implemented")
}

func RegisterRelayPullServerServer(s *grpc.Server, srv RelayPullServerServer) {
	s.RegisterService(&_RelayPullServer_serviceDesc, srv)
}

func _RelayPullServer_PullResourceDeltas_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayPullServerServer).PullResourceDeltas(&relayPullServerPullResourceDeltasServer{stream})
}

type RelayPullServer_PullResourceDeltasServer interface {
	Send(*RelayDeltaResponse) error
	Recv() (*RelayDeltaRequest, error)
	grpc.ServerStream
}

type relayPullServerPullResourceDeltasServer struct {
	grpc.ServerStream
}

func (x *relayPullServerPullResourceDeltasServer) Send(m *RelayDeltaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relayPullServerPullResourceDeltasServer) Recv() (*RelayDeltaRequest, error) {
	m := new(RelayDeltaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RelayPullServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relay.multicluster.skv2.solo.io.RelayPullServer",
	HandlerType: (*RelayPullServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullResourceDeltas",
			Handler:       _RelayPullServer_PullResourceDeltas_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "relay/v1alpha1/relay.proto",
}

// RelayPushServerClient is the client API for RelayPushServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelayPushServerClient interface {
	// This is "reverse XDS", as discovery initiates the connection
	// but it is logically the server. it givens whatever resources networking requests it to get.
	// i.e. the first message is RelayDeltaRequest
	PushResourceDeltas(ctx context.Context, opts ...grpc.CallOption) (RelayPushServer_PushResourceDeltasClient, error)
}

type relayPushServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayPushServerClient(cc grpc.ClientConnInterface) RelayPushServerClient {
	return &relayPushServerClient{cc}
}

func (c *relayPushServerClient) PushResourceDeltas(ctx context.Context, opts ...grpc.CallOption) (RelayPushServer_PushResourceDeltasClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RelayPushServer_serviceDesc.Streams[0], "/relay.multicluster.skv2.solo.io.RelayPushServer/PushResourceDeltas", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayPushServerPushResourceDeltasClient{stream}
	return x, nil
}

type RelayPushServer_PushResourceDeltasClient interface {
	Send(*RelayDeltaResponse) error
	Recv() (*RelayDeltaRequest, error)
	grpc.ClientStream
}

type relayPushServerPushResourceDeltasClient struct {
	grpc.ClientStream
}

func (x *relayPushServerPushResourceDeltasClient) Send(m *RelayDeltaResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relayPushServerPushResourceDeltasClient) Recv() (*RelayDeltaRequest, error) {
	m := new(RelayDeltaRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelayPushServerServer is the server API for RelayPushServer service.
type RelayPushServerServer interface {
	// This is "reverse XDS", as discovery initiates the connection
	// but it is logically the server. it givens whatever resources networking requests it to get.
	// i.e. the first message is RelayDeltaRequest
	PushResourceDeltas(RelayPushServer_PushResourceDeltasServer) error
}

// UnimplementedRelayPushServerServer can be embedded to have forward compatible implementations.
type UnimplementedRelayPushServerServer struct {
}

func (*UnimplementedRelayPushServerServer) PushResourceDeltas(RelayPushServer_PushResourceDeltasServer) error {
	return status.Errorf(codes.Unimplemented, "method PushResourceDeltas not implemented")
}

func RegisterRelayPushServerServer(s *grpc.Server, srv RelayPushServerServer) {
	s.RegisterService(&_RelayPushServer_serviceDesc, srv)
}

func _RelayPushServer_PushResourceDeltas_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayPushServerServer).PushResourceDeltas(&relayPushServerPushResourceDeltasServer{stream})
}

type RelayPushServer_PushResourceDeltasServer interface {
	Send(*RelayDeltaRequest) error
	Recv() (*RelayDeltaResponse, error)
	grpc.ServerStream
}

type relayPushServerPushResourceDeltasServer struct {
	grpc.ServerStream
}

func (x *relayPushServerPushResourceDeltasServer) Send(m *RelayDeltaRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relayPushServerPushResourceDeltasServer) Recv() (*RelayDeltaResponse, error) {
	m := new(RelayDeltaResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RelayPushServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relay.multicluster.skv2.solo.io.RelayPushServer",
	HandlerType: (*RelayPushServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushResourceDeltas",
			Handler:       _RelayPushServer_PushResourceDeltas_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "relay/v1alpha1/relay.proto",
}
